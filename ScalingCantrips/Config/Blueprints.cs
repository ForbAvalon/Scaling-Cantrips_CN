using HarmonyLib;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.JsonSystem;
using Kingmaker.Utility;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;

namespace ScalingCantrips.Config
{
  public class Blueprints : IUpdatableSettings
  {
    [JsonProperty]
    private bool OverrideIds = false;
    [JsonProperty]
    private readonly SortedDictionary<string, Guid> NewBlueprints = new();
    [JsonProperty]
    private readonly SortedDictionary<string, Guid> AutoGenerated = new();
    [JsonProperty]
    private readonly SortedDictionary<string, Guid> UnusedGUIDs = new();
    private readonly SortedDictionary<string, Guid> UsedGUIDs = new();

    public void OverrideSettings(IUpdatableSettings userSettings)
    {
      if (userSettings is not Blueprints loadedSettings) { return; }
      if (loadedSettings.OverrideIds)
      {
        OverrideIds = loadedSettings.OverrideIds;
        loadedSettings.NewBlueprints.ForEach(entry =>
        {
          if (NewBlueprints.ContainsKey(entry.Key))
          {
            NewBlueprints[entry.Key] = entry.Value;
          }
        });
      }
      loadedSettings.AutoGenerated.ForEach(entry =>
      {
        AutoGenerated[entry.Key] = entry.Value;
      });
    }

    public BlueprintGuid GetGUID(string name)
    {
      if (!NewBlueprints.TryGetValue(name, out var Id))
      {
#if DEBUG
        if (!AutoGenerated.TryGetValue(name, out Id))
        {
          Id = Guid.NewGuid();
          AutoGenerated.Add(name, Id);
          Main.LogDebug($"Generated new GUID: {name} - {Id}");
        }
        else
        {
          Main.LogDebug($"WARNING: GUID: {name} - {Id} is autogenerated");
        }
#endif
      }
      if (Id == null) { Main.Error($"ERROR: GUID for {name} not found"); }
      UsedGUIDs[name] = Id;
      return new BlueprintGuid(Id);
    }

    [HarmonyPatch(typeof(BlueprintsCache), "Init")]
    static class AutoGUID_Log_Patch
    {
      [HarmonyPriority(Priority.Last)]
      static void Postfix()
      {
        try
        {
          GenerateUnused();
          WriteBlueprints("Blueprints.json");
        }
        catch (Exception e)
        {
          Main.Logger.LogException(e);
        }
      }

      static void GenerateUnused()
      {
        ModSettings.Blueprints.AutoGenerated.ForEach(entry =>
        {
          if (!ModSettings.Blueprints.UsedGUIDs.ContainsKey(entry.Key))
          {
            ModSettings.Blueprints.UnusedGUIDs[entry.Key] = entry.Value;
          }
        });
        ModSettings.Blueprints.NewBlueprints.ForEach(entry =>
        {
          if (!ModSettings.Blueprints.UsedGUIDs.ContainsKey(entry.Key))
          {
            ModSettings.Blueprints.UnusedGUIDs[entry.Key] = entry.Value;
          }
        });
      }

      private static void WriteBlueprints(string fileName)
      {
        string userConfigFolder = ModSettings.ModEntry.Path + "UserSettings";
        var userPath = $"{userConfigFolder}{Path.DirectorySeparatorChar}{fileName}";

        JsonSerializer serializer = new JsonSerializer
        {
          NullValueHandling = NullValueHandling.Include,
          Formatting = Formatting.Indented
        };
        using (StreamWriter sWriter = new StreamWriter(userPath))
        using (JsonWriter jWriter = new JsonTextWriter(sWriter))
        {
          serializer.Serialize(jWriter, ModSettings.Blueprints);
        }
      }
    }
  }
}
